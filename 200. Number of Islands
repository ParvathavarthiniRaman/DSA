class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid : return 0 
        rows,cols= len(grid),len(grid[0])
        vis= set()
        count= 0
        def bfs(r,c):
            q= deque()
            q.append((r,c))
            vis.add((r,c))
            while q : 
                (r,c)=q.popleft()
                directions = [[1,0],[-1,0],[0,1],[0,-1]]
                for dr,dc in directions :
                    newr = r + dr
                    newc = c + dc
                    if newr in range(rows) and newc in range(cols) and grid[newr][newc] =="1" and (newr,newc) not in vis :
                        vis.add((newr,newc))
                        q.append((newr,newc))

        for i in range(rows):
            for j in range(cols):
                if grid[i][j] =="1" and (i,j) not in vis :
                    bfs(i,j)
                    count+=1
        return count
