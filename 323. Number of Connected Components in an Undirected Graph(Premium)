class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        parent=[n1 for n1 in range(n)]
        rank = [1] * n

        def find(n1):
            res= n1 
            while res != parent[res]:
                parent[res] = parent[parent[res]]
                res= parent[res]
            return res
        def unionByRank(n1,n2):
            p1=find(n1)
            p2=find(n2)
            if p1==p2 :
                return 0 
            if rank[p1] > rank[p2]:
                parent[p2] = p1 
                rank[p1]+=rank[p2]
            else :
                parent[p1] = p2
                rank[p2]+=rank[p1]
            return 1
        count= n 
        for n1, n2 in edges:
            count-=unionByRank(n1,n2)
        return count
