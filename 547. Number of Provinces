class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        #parent = [i for i in range(len(isConnected))]
        parent = list(range(len(isConnected)))
        rank=[1]* len(isConnected)

        def findParent(x):
            if parent[x] != x:
               parent[x] = findParent(parent[x])
            return parent[x]

        def unionByRank(n1,n2) :   
            p1=findParent(n1) 
            p2=findParent(n2)
            if rank[p1] > rank[p2] :
                parent[p2]=p1 
            elif rank[p2] > rank[p1] :
                parent[p1]=p2
            else : 
                parent[p2]=p1
                rank[p1]+=1
        cnt=len(isConnected)
        n=cnt
        for i in range(n):
            for j in range(i+1,n):
                if isConnected[i][j] == 1 and findParent(i) != findParent(j) :
                   cnt-=1
                   unionByRank(i,j)
        return cnt


